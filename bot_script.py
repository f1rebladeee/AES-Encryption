from telebot import TeleBot, types
from telebot import formatting
import subprocess
import os
import time
import psutil
from encrypt import *
from decrypt import *


# Tech bot information
token = '7155852399:AAEFVqqK-a8Ig4kyCz-S6g-_f06EusgIZ2Y'
bot = TeleBot(token)


# Keyboards
select_mode_keyboard = types.InlineKeyboardMarkup()
aes_file_btn = types.InlineKeyboardButton(text="–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ªüìÑ", callback_data="encrypt_file")
aes_message_btn = types.InlineKeyboardButton(text="–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ‚úâÔ∏è", callback_data="encrypt_message")
select_mode_keyboard.add(aes_message_btn)
select_mode_keyboard.add(aes_file_btn)


# Global variables
excluded_alphabet = '–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é—ë–ô–¶–£–ö–ï–ù–ì–®–©–ó–•–™–§–´–í–ê–ü–†–û–õ–î–ñ–≠–Ø–ß–°–ú–ò–¢–¨–ë–Æ–Å'
start_msg = (f'<b>AES bot</b>ü§ñ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å!\n'
             f'–Ø —É–º–µ—é —à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∞–ª–≥–æ—Ä–∏—Ç–º –∞—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è AES.\n'
             f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å <b>–∞–Ω–≥–ª–∏–π—Å–∫–∏–º</b> —è–∑—ã–∫–æ–º.\n'
             f'–Ø –º–æ–≥—É –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º <b>.txt</b>\n'
             f'–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å:')
file_enc_msg = (f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º <b>.txt</b>\n'
                f'–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å <b>1–º–±</b>\n'
                f'–§–∞–π–ª –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤!')
message_enc_msg = (f'–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å.\n'
                   f'–¢–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤!')


@bot.message_handler(commands=['start'])
def start(m: types.Message):
    bot.send_message(m.chat.id, start_msg, reply_markup=select_mode_keyboard, parse_mode="html")


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call: types.CallbackQuery):
    if call.message:
        if call.data == 'encrypt_message':
            msg = bot.send_message(call.message.chat.id, message_enc_msg, parse_mode="html")
            bot.register_next_step_handler(msg, encrypt_message)
        if call.data == 'encrypt_file':
            msg = bot.send_message(call.message.chat.id, file_enc_msg, parse_mode="html")
            bot.register_next_step_handler(msg, download_user_file)


@bot.message_handler(content_types=['document'])
def download_user_file(message: types.Message):
    file_name = message.document.file_name
    if not file_name.endswith('.txt'):
        msg = bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ‚ùå')
        bot.register_next_step_handler(msg, download_user_file)
    elif message.document.file_size > 1024 * 1024 * 1024:
        msg = bot.send_message(message.chat.id, '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞‚ùå')
        bot.register_next_step_handler(msg, download_user_file)
    else:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with open('input.txt', 'wb') as in_file:
            in_file.write(downloaded_file)

        os.system("g++ -o main.exe main.cpp")

        f = open("input.txt").readline()

        memory_usage_before = psutil.Process(os.getpid()).memory_info().rss / 1024.0 / 1024.0

        subprocess.run(["main.exe", f], check=True)

        userInput = f
        key = random_key_generator()
        keySchedule = generate_keys(key)

        start_time = time.time()
        encrypted_data = encrypt_data(userInput, keySchedule)
        encryption_time = time.time() - start_time
        python_enc_time = f'Py | Encryption Time: {encryption_time:.6f} seconds'
        with open('python_text_files/py_enc.txt', 'w', encoding='utf-8') as py_enc_file:
            py_enc_file.write(encrypted_data[1])

        start_time = time.time()
        decrypted_data = decrypt_data(encrypted_data[0], len(userInput), keySchedule)
        decryption_time = time.time() - start_time
        python_dec_time = f'Py | Decryption Time: {decryption_time:.6f} seconds'
        with open('python_text_files/py_dec.txt', 'w', encoding='utf-8') as py_dec_file:
            py_dec_file.write(decrypted_data)

        memory_usage_after = psutil.Process(os.getpid()).memory_info().rss / 1024.0 / 1024.0
        memory_usage = memory_usage_after - memory_usage_before
        py_mem_usage = f'Py | Memory Usage: {memory_usage} MB'

        py_enc = open('python_text_files/py_enc.txt', 'rb')
        cpp_enc = open('cpp_text_files/cpp_enc.txt', 'rb')
        py_dec = open('python_text_files/py_dec.txt', 'rb')
        cpp_dec = open('cpp_text_files/cpp_dec.txt', 'rb')

        with open('cpp_text_files/cpp_enc_time.txt', 'r', encoding='utf-8') as cpp_enc_time_file:
            cpp_enc_time = 'üíª–°++ | Encryption Time: ' + cpp_enc_time_file.read() + ' seconds'
        with open('cpp_text_files/cpp_dec_time.txt', 'r', encoding='utf-8') as cpp_dec_time_file:
            cpp_dec_time = 'üíª–°++ | Decryption Time: ' + cpp_dec_time_file.read() + ' seconds'
        with open('cpp_text_files/cpp_mem_usage.txt', 'r', encoding='utf-8') as cpp_mem_usage_file:
            cpp_mem_usage = 'üíª–°++ | Memory usage: ' + cpp_mem_usage_file.read()

        full_msg = cpp_mem_usage + '\n\n' + 'üêç' + py_mem_usage

        bot.send_document(message.chat.id, py_enc, caption='üêç' + python_enc_time)
        bot.send_document(message.chat.id, cpp_enc, caption=cpp_enc_time)
        bot.send_document(message.chat.id, py_dec, caption='üêç' + python_dec_time)
        bot.send_document(message.chat.id, cpp_dec, caption=cpp_dec_time)
        bot.send_message(message.chat.id, full_msg)


def encrypt_message(m):
    flag = True
    for i in range(len(m.text)):
        if m.text[i] in excluded_alphabet:
            flag = False
            break
    if not flag:
        msg = bot.send_message(m.chat.id, '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã! –í–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ‚ùå')
        bot.register_next_step_handler(msg, encrypt_message)
    else:
        with open('input.txt', 'w', encoding='utf-8') as user_input:
            user_input.write(m.text)
        user_input.close()
        os.system("g++ -o main.exe main.cpp")

        f = open("input.txt").readline()

        memory_usage_before = psutil.Process(os.getpid()).memory_info().rss / 1024.0 / 1024.0

        subprocess.run(["main.exe", f], check=True)

        userInput = f
        key = random_key_generator()
        keySchedule = generate_keys(key)

        start_time = time.time()
        encrypted_data = encrypt_data(userInput, keySchedule)
        encryption_time = time.time() - start_time

        start_time = time.time()
        decrypted_data = decrypt_data(encrypted_data[0], len(userInput), keySchedule)
        decryption_time = time.time() - start_time

        memory_usage_after = psutil.Process(os.getpid()).memory_info().rss / 1024.0 / 1024.0
        memory_usage = memory_usage_after - memory_usage_before

        cpp_enc_time = open('cpp_text_files/cpp_enc_time.txt', 'r', encoding="utf-8").read()
        cpp_enc_data = open('cpp_text_files/cpp_enc.txt', 'r', encoding="utf-8", errors="ignore").read()
        cpp_dec_time = open('cpp_text_files/cpp_dec_time.txt', 'r', encoding="utf-8").read()
        cpp_dec_data = open('cpp_text_files/cpp_dec.txt', 'r', encoding="utf-8", errors="ignore").read()
        cpp_mem_usage = open('cpp_text_files/cpp_mem_usage.txt', 'r', encoding='utf-8').read()

        py_msg = (f'‚è≠Ô∏è‚è±Ô∏èPy | Encryption Time: {encryption_time:.6f} seconds\n\n'
                  f'üêçPy | AES Encryption: {formatting.hcode(encrypted_data[1])}\n\n'
                  f'‚èÆÔ∏è‚è±Ô∏èPy | Decryption Time: {decryption_time:.6f} seconds\n\n'
                  f'üêçPy | AES Decryption: {formatting.hcode(decrypted_data)}\n\n'
                  f'üìàPy | Memory Usage: {memory_usage} MB')

        cpp_msg = (f'‚è≠Ô∏è‚è±Ô∏è–°++ | Encryption time: {cpp_enc_time} seconds\n\n'
                   f'üíª–°++ | AES Encryption: {formatting.hcode(cpp_enc_data)}\n\n'
                   f'‚èÆÔ∏è‚è±Ô∏è–°++ | Decryption Time: {cpp_dec_time} seconds\n\n'
                   f'üíª–°++ | AES Decryption: {formatting.hcode(cpp_dec_data)}\n\n'
                   f'üìà–°++ | Memory usage: {cpp_mem_usage} MB')

        bot.send_message(m.chat.id, py_msg, parse_mode='html')
        bot.send_message(m.chat.id, cpp_msg, parse_mode='html')


def main():
    if bot.polling(none_stop=True):
        print('Bot started successfully!')
    print('Application ended')


if __name__ == '__main__':
    main()
